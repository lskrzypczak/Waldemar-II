
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000002a2  00000336  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080010a  0080010a  00000340  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000069  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000003a8  00000000  00000000  000003c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000198  00000000  00000000  00000771  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ba  00000000  00000000  00000909  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000040  00000000  00000000  00000cc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000105  00000000  00000000  00000d04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001c6  00000000  00000000  00000e09  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00000fcf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	27 c0       	rjmp	.+78     	; 0x6c <__vector_14>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e2 ea       	ldi	r30, 0xA2	; 162
  48:	f2 e0       	ldi	r31, 0x02	; 2
  4a:	02 c0       	rjmp	.+4      	; 0x50 <.do_copy_data_start>

0000004c <.do_copy_data_loop>:
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0

00000050 <.do_copy_data_start>:
  50:	aa 30       	cpi	r26, 0x0A	; 10
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <.do_copy_data_loop>

00000056 <__do_clear_bss>:
  56:	11 e0       	ldi	r17, 0x01	; 1
  58:	aa e0       	ldi	r26, 0x0A	; 10
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	ad 30       	cpi	r26, 0x0D	; 13
  62:	b1 07       	cpc	r27, r17
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	9e d0       	rcall	.+316    	; 0x1a4 <main>
  68:	1a c1       	rjmp	.+564    	; 0x29e <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <__vector_14>:
	}//for

}//main

ISR(TIMER0_COMPA_vect)
{
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	2f 93       	push	r18
  78:	8f 93       	push	r24
  7a:	9f 93       	push	r25
	//not needed - left just in case
	i+=10;
  7c:	80 91 0b 01 	lds	r24, 0x010B
  80:	90 91 0c 01 	lds	r25, 0x010C
  84:	0a 96       	adiw	r24, 0x0a	; 10
  86:	90 93 0c 01 	sts	0x010C, r25
  8a:	80 93 0b 01 	sts	0x010B, r24
	if (i>=300) i=0;
  8e:	80 91 0b 01 	lds	r24, 0x010B
  92:	90 91 0c 01 	lds	r25, 0x010C
  96:	8c 52       	subi	r24, 0x2C	; 44
  98:	91 40       	sbci	r25, 0x01	; 1
  9a:	20 f0       	brcs	.+8      	; 0xa4 <__vector_14+0x38>
  9c:	10 92 0c 01 	sts	0x010C, r1
  a0:	10 92 0b 01 	sts	0x010B, r1
}//ISR
  a4:	9f 91       	pop	r25
  a6:	8f 91       	pop	r24
  a8:	2f 91       	pop	r18
  aa:	0f 90       	pop	r0
  ac:	0f be       	out	0x3f, r0	; 63
  ae:	0f 90       	pop	r0
  b0:	1f 90       	pop	r1
  b2:	18 95       	reti

000000b4 <MotorStep>:

void MotorStep(unsigned char Motor, unsigned short Steps, unsigned char Dir)
{
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	58 2f       	mov	r21, r24
  ba:	20 91 01 01 	lds	r18, 0x0101
  be:	30 91 00 01 	lds	r19, 0x0100
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b0 e0       	ldi	r27, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  c6:	c0 e1       	ldi	r28, 0x10	; 16
  c8:	d7 e2       	ldi	r29, 0x27	; 39
  ca:	61 c0       	rjmp	.+194    	; 0x18e <MotorStep+0xda>
	unsigned short i;
	for (i=0; i<Steps; i++)
	{
		switch(Motor)
  cc:	55 23       	and	r21, r21
  ce:	e1 f0       	breq	.+56     	; 0x108 <MotorStep+0x54>
  d0:	e2 2f       	mov	r30, r18
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	51 30       	cpi	r21, 0x01	; 1
  d6:	59 f5       	brne	.+86     	; 0x12e <MotorStep+0x7a>
		{
			case 1:
				PORTD &= ~(0x0F<<PD2);
  d8:	8b b1       	in	r24, 0x0b	; 11
  da:	83 7c       	andi	r24, 0xC3	; 195
  dc:	8b b9       	out	0x0b, r24	; 11
				PORTD |= (step[RW_step]<<PD2);
  de:	9b b1       	in	r25, 0x0b	; 11
  e0:	ee 5f       	subi	r30, 0xFE	; 254
  e2:	fe 4f       	sbci	r31, 0xFE	; 254
  e4:	80 81       	ld	r24, Z
  e6:	88 0f       	add	r24, r24
  e8:	88 0f       	add	r24, r24
  ea:	89 2b       	or	r24, r25
  ec:	8b b9       	out	0x0b, r24	; 11
				if (!Dir)	//forward
  ee:	44 23       	and	r20, r20
  f0:	31 f4       	brne	.+12     	; 0xfe <MotorStep+0x4a>
				{
					RW_step++;
  f2:	2f 5f       	subi	r18, 0xFF	; 255
					if (RW_step==8) RW_step=0;
  f4:	28 30       	cpi	r18, 0x08	; 8
  f6:	09 f0       	breq	.+2      	; 0xfa <MotorStep+0x46>
  f8:	46 c0       	rjmp	.+140    	; 0x186 <MotorStep+0xd2>
  fa:	20 e0       	ldi	r18, 0x00	; 0
  fc:	44 c0       	rjmp	.+136    	; 0x186 <MotorStep+0xd2>
				}//if
				else		//backwards
				{
					RW_step--;
  fe:	21 50       	subi	r18, 0x01	; 1
 100:	08 f0       	brcs	.+2      	; 0x104 <MotorStep+0x50>
 102:	41 c0       	rjmp	.+130    	; 0x186 <MotorStep+0xd2>
					if (RW_step==255) RW_step=7;
 104:	27 e0       	ldi	r18, 0x07	; 7
 106:	3f c0       	rjmp	.+126    	; 0x186 <MotorStep+0xd2>
				}//else
			break;
			case 0:
				PORTC &= ~(0x0F<<PC0);
 108:	88 b1       	in	r24, 0x08	; 8
 10a:	80 7f       	andi	r24, 0xF0	; 240
 10c:	88 b9       	out	0x08, r24	; 8
				PORTC |= (step[LW_step]<<PC0);
 10e:	98 b1       	in	r25, 0x08	; 8
 110:	e3 2f       	mov	r30, r19
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	ee 5f       	subi	r30, 0xFE	; 254
 116:	fe 4f       	sbci	r31, 0xFE	; 254
 118:	80 81       	ld	r24, Z
 11a:	98 2b       	or	r25, r24
 11c:	98 b9       	out	0x08, r25	; 8
 11e:	e3 2f       	mov	r30, r19
 120:	e1 50       	subi	r30, 0x01	; 1
				if (!Dir)
 122:	44 23       	and	r20, r20
 124:	11 f4       	brne	.+4      	; 0x12a <MotorStep+0x76>
				{
					LW_step--;
 126:	3e 2f       	mov	r19, r30
 128:	25 c0       	rjmp	.+74     	; 0x174 <MotorStep+0xc0>
					if (LW_step==255) LW_step=7;
				}//if
				else
				{
					LW_step--;
 12a:	3e 2f       	mov	r19, r30
 12c:	27 c0       	rjmp	.+78     	; 0x17c <MotorStep+0xc8>
					if (LW_step==8) LW_step=0;
				}//else
			break;
			default:	//both motors
				PORTD &= ~(0x0F<<PD2);
 12e:	8b b1       	in	r24, 0x0b	; 11
 130:	83 7c       	andi	r24, 0xC3	; 195
 132:	8b b9       	out	0x0b, r24	; 11
				PORTD |= (step[RW_step]<<PD2);
 134:	9b b1       	in	r25, 0x0b	; 11
 136:	ee 5f       	subi	r30, 0xFE	; 254
 138:	fe 4f       	sbci	r31, 0xFE	; 254
 13a:	80 81       	ld	r24, Z
 13c:	88 0f       	add	r24, r24
 13e:	88 0f       	add	r24, r24
 140:	89 2b       	or	r24, r25
 142:	8b b9       	out	0x0b, r24	; 11
				if (!Dir)	//forward
 144:	44 23       	and	r20, r20
 146:	29 f4       	brne	.+10     	; 0x152 <MotorStep+0x9e>
				{
					RW_step++;
 148:	2f 5f       	subi	r18, 0xFF	; 255
					if (RW_step==8) RW_step=0;
 14a:	28 30       	cpi	r18, 0x08	; 8
 14c:	29 f4       	brne	.+10     	; 0x158 <MotorStep+0xa4>
 14e:	20 e0       	ldi	r18, 0x00	; 0
 150:	03 c0       	rjmp	.+6      	; 0x158 <MotorStep+0xa4>
				}//if
				else
				{
					RW_step--;
 152:	21 50       	subi	r18, 0x01	; 1
 154:	08 f4       	brcc	.+2      	; 0x158 <MotorStep+0xa4>
					if (RW_step==255) RW_step=7;
 156:	27 e0       	ldi	r18, 0x07	; 7
				}//else

				PORTC &= ~(0x0F<<PC0);
 158:	88 b1       	in	r24, 0x08	; 8
 15a:	80 7f       	andi	r24, 0xF0	; 240
 15c:	88 b9       	out	0x08, r24	; 8
				PORTC |= (step[LW_step]<<PC0);
 15e:	98 b1       	in	r25, 0x08	; 8
 160:	e3 2f       	mov	r30, r19
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	ee 5f       	subi	r30, 0xFE	; 254
 166:	fe 4f       	sbci	r31, 0xFE	; 254
 168:	80 81       	ld	r24, Z
 16a:	98 2b       	or	r25, r24
 16c:	98 b9       	out	0x08, r25	; 8
				if (!Dir)
 16e:	44 23       	and	r20, r20
 170:	21 f4       	brne	.+8      	; 0x17a <MotorStep+0xc6>
				{
					LW_step--;
 172:	31 50       	subi	r19, 0x01	; 1
					if (LW_step==255) LW_step=7;
 174:	3f 3f       	cpi	r19, 0xFF	; 255
 176:	39 f4       	brne	.+14     	; 0x186 <MotorStep+0xd2>
 178:	05 c0       	rjmp	.+10     	; 0x184 <MotorStep+0xd0>
				}//if
				else
				{
					LW_step++;
 17a:	3f 5f       	subi	r19, 0xFF	; 255
					if (LW_step==8) LW_step=0;
 17c:	38 30       	cpi	r19, 0x08	; 8
 17e:	19 f4       	brne	.+6      	; 0x186 <MotorStep+0xd2>
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	01 c0       	rjmp	.+2      	; 0x186 <MotorStep+0xd2>
 184:	37 e0       	ldi	r19, 0x07	; 7
 186:	ce 01       	movw	r24, r28
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <MotorStep+0xd4>
}//ISR

void MotorStep(unsigned char Motor, unsigned short Steps, unsigned char Dir)
{
	unsigned short i;
	for (i=0; i<Steps; i++)
 18c:	11 96       	adiw	r26, 0x01	; 1
 18e:	a6 17       	cp	r26, r22
 190:	b7 07       	cpc	r27, r23
 192:	08 f4       	brcc	.+2      	; 0x196 <MotorStep+0xe2>
 194:	9b cf       	rjmp	.-202    	; 0xcc <MotorStep+0x18>
 196:	20 93 01 01 	sts	0x0101, r18
 19a:	30 93 00 01 	sts	0x0100, r19
				}//else
			break;
		}//switch
		_delay_ms(5);	//delay between steps
	}//for
}//MotorStep
 19e:	df 91       	pop	r29
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <main>:
unsigned char LW_step=7, RW_step=8;
unsigned char step[8] = {0x01, 0x03, 0x02, 0x06, 0x04, 0x0C, 0x08, 0x09};	//step sequence table, half-step
volatile unsigned short i;

int main(void)
{
 1a4:	0f 93       	push	r16
 1a6:	1f 93       	push	r17
 1a8:	cf 93       	push	r28
 1aa:	df 93       	push	r29
	unsigned short j;

	PORTB = 0xFF;
 1ac:	9f ef       	ldi	r25, 0xFF	; 255
 1ae:	95 b9       	out	0x05, r25	; 5
	DDRB = 0x02;
 1b0:	22 e0       	ldi	r18, 0x02	; 2
 1b2:	24 b9       	out	0x04, r18	; 4
	PORTC = 0xF0;
 1b4:	80 ef       	ldi	r24, 0xF0	; 240
 1b6:	88 b9       	out	0x08, r24	; 8
	DDRC = 0x0F;
 1b8:	8f e0       	ldi	r24, 0x0F	; 15
 1ba:	87 b9       	out	0x07, r24	; 7
	PORTD = 0xFF;
 1bc:	9b b9       	out	0x0b, r25	; 11
	DDRD = 0x3F;
 1be:	8f e3       	ldi	r24, 0x3F	; 63
 1c0:	8a b9       	out	0x0a, r24	; 10

	//init timer1 36kHz
	TCNT1 = 0x0000;
 1c2:	10 92 85 00 	sts	0x0085, r1
 1c6:	10 92 84 00 	sts	0x0084, r1
	OCR1A = 111;
 1ca:	8f e6       	ldi	r24, 0x6F	; 111
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	90 93 89 00 	sts	0x0089, r25
 1d2:	80 93 88 00 	sts	0x0088, r24
	TCCR1A = (1<<COM1A0);
 1d6:	80 e4       	ldi	r24, 0x40	; 64
 1d8:	80 93 80 00 	sts	0x0080, r24
	TCCR1B = (1<<WGM12)|(1<<CS10);
 1dc:	89 e0       	ldi	r24, 0x09	; 9
 1de:	80 93 81 00 	sts	0x0081, r24
	
	//thought as 10ms impulses of IR but doesn't help in any way and makes programming of
	//sensors harder...
	TCNT0 = 0x00;
 1e2:	16 bc       	out	0x26, r1	; 38
	OCR0A = 0x78;
 1e4:	88 e7       	ldi	r24, 0x78	; 120
 1e6:	87 bd       	out	0x27, r24	; 39
	TCCR0A = (2<<WGM01);
 1e8:	84 e0       	ldi	r24, 0x04	; 4
 1ea:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (5<<CS00);
 1ec:	85 e0       	ldi	r24, 0x05	; 5
 1ee:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1<<OCIE0A);
 1f0:	20 93 6e 00 	sts	0x006E, r18


	sei();
 1f4:	78 94       	sei
	//shut down both motors
	PORTC &= ~(0x0F<<PC0);
 1f6:	88 b1       	in	r24, 0x08	; 8
 1f8:	80 7f       	andi	r24, 0xF0	; 240
 1fa:	88 b9       	out	0x08, r24	; 8
	PORTD &= ~(0x0F<<PD2);
 1fc:	8b b1       	in	r24, 0x0b	; 11
 1fe:	83 7c       	andi	r24, 0xC3	; 195
 200:	8b b9       	out	0x0b, r24	; 11
 202:	08 ec       	ldi	r16, 0xC8	; 200
 204:	10 e0       	ldi	r17, 0x00	; 0

	for(;;)
	{
		j = i+100;
 206:	c0 91 0b 01 	lds	r28, 0x010B
 20a:	d0 91 0c 01 	lds	r29, 0x010C
 20e:	cc 59       	subi	r28, 0x9C	; 156
 210:	df 4f       	sbci	r29, 0xFF	; 255

		MotorStep(BM,1,FW);		//normally go straight forward
 212:	82 e0       	ldi	r24, 0x02	; 2
 214:	61 e0       	ldi	r22, 0x01	; 1
 216:	70 e0       	ldi	r23, 0x00	; 0
 218:	40 e0       	ldi	r20, 0x00	; 0
 21a:	4c df       	rcall	.-360    	; 0xb4 <MotorStep>
		
		if (!(PINC & (1<<PC5)))	//if there is an obstacle...
 21c:	35 99       	sbic	0x06, 5	; 6
 21e:	1e c0       	rjmp	.+60     	; 0x25c <main+0xb8>
 220:	88 e8       	ldi	r24, 0x88	; 136
 222:	93 e1       	ldi	r25, 0x13	; 19
 224:	f8 01       	movw	r30, r16
 226:	31 97       	sbiw	r30, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <main+0x82>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 22a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 22c:	d9 f7       	brne	.-10     	; 0x224 <main+0x80>
		{
			_delay_ms(500);
			MotorStep(BM,300,BW);	//...go backwards...
 22e:	82 e0       	ldi	r24, 0x02	; 2
 230:	6c e2       	ldi	r22, 0x2C	; 44
 232:	71 e0       	ldi	r23, 0x01	; 1
 234:	41 e0       	ldi	r20, 0x01	; 1
 236:	3e df       	rcall	.-388    	; 0xb4 <MotorStep>
 238:	88 e8       	ldi	r24, 0x88	; 136
 23a:	93 e1       	ldi	r25, 0x13	; 19
 23c:	f8 01       	movw	r30, r16
 23e:	31 97       	sbiw	r30, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <main+0x9a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 242:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 244:	d9 f7       	brne	.-10     	; 0x23c <main+0x98>
			_delay_ms(500);
			MotorStep(MR,j,FW);	//...and then turn
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	be 01       	movw	r22, r28
 24a:	40 e0       	ldi	r20, 0x00	; 0
 24c:	33 df       	rcall	.-410    	; 0xb4 <MotorStep>
 24e:	88 e8       	ldi	r24, 0x88	; 136
 250:	93 e1       	ldi	r25, 0x13	; 19
 252:	f8 01       	movw	r30, r16
 254:	31 97       	sbiw	r30, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <main+0xb0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 258:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 25a:	d9 f7       	brne	.-10     	; 0x252 <main+0xae>
			_delay_ms(500);
		}//if
		if (!(PINC & (1<<PC4)))	//same as above but for another sensor
 25c:	34 99       	sbic	0x06, 4	; 6
 25e:	d3 cf       	rjmp	.-90     	; 0x206 <main+0x62>
 260:	88 e8       	ldi	r24, 0x88	; 136
 262:	93 e1       	ldi	r25, 0x13	; 19
 264:	f8 01       	movw	r30, r16
 266:	31 97       	sbiw	r30, 0x01	; 1
 268:	f1 f7       	brne	.-4      	; 0x266 <main+0xc2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 26a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 26c:	d9 f7       	brne	.-10     	; 0x264 <main+0xc0>
		{
			_delay_ms(500);
			MotorStep(BM,300,BW);
 26e:	82 e0       	ldi	r24, 0x02	; 2
 270:	6c e2       	ldi	r22, 0x2C	; 44
 272:	71 e0       	ldi	r23, 0x01	; 1
 274:	41 e0       	ldi	r20, 0x01	; 1
 276:	1e df       	rcall	.-452    	; 0xb4 <MotorStep>
 278:	88 e8       	ldi	r24, 0x88	; 136
 27a:	93 e1       	ldi	r25, 0x13	; 19
 27c:	f8 01       	movw	r30, r16
 27e:	31 97       	sbiw	r30, 0x01	; 1
 280:	f1 f7       	brne	.-4      	; 0x27e <main+0xda>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 282:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 284:	d9 f7       	brne	.-10     	; 0x27c <main+0xd8>
			_delay_ms(500);
			MotorStep(ML,j,FW);
 286:	80 e0       	ldi	r24, 0x00	; 0
 288:	be 01       	movw	r22, r28
 28a:	40 e0       	ldi	r20, 0x00	; 0
 28c:	13 df       	rcall	.-474    	; 0xb4 <MotorStep>
 28e:	88 e8       	ldi	r24, 0x88	; 136
 290:	93 e1       	ldi	r25, 0x13	; 19
 292:	f8 01       	movw	r30, r16
 294:	31 97       	sbiw	r30, 0x01	; 1
 296:	f1 f7       	brne	.-4      	; 0x294 <main+0xf0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 298:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 29a:	d9 f7       	brne	.-10     	; 0x292 <main+0xee>
 29c:	b4 cf       	rjmp	.-152    	; 0x206 <main+0x62>

0000029e <_exit>:
 29e:	f8 94       	cli

000002a0 <__stop_program>:
 2a0:	ff cf       	rjmp	.-2      	; 0x2a0 <__stop_program>
